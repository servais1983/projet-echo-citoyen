version: '3.8'

services:
  notification-service:
    image: ${DOCKER_REGISTRY:-registry.example.com}/notification-service:staging
    container_name: notification-service-staging
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/notifications_staging
      - REDIS_URL=redis://redis:6379/0
      - SMTP_HOST=smtp.staging.example.com
      - SMTP_PORT=587
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - notification-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3

  db:
    image: postgres:14-alpine
    container_name: notification-db-staging
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=notifications_staging
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - notification-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: notification-redis-staging
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data_staging:/data
    networks:
      - notification-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: notification-prometheus-staging
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data_staging:/prometheus
    ports:
      - "9090:9090"
    networks:
      - notification-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  grafana:
    image: grafana/grafana:10.0.0
    container_name: notification-grafana-staging
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.staging.example.com
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data_staging:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - notification-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres_data_staging:
  redis_data_staging:
  prometheus_data_staging:
  grafana_data_staging:

networks:
  notification-network:
    driver: bridge 